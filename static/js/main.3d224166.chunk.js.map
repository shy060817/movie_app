{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","key","title","poster","genres","summary","torrents","react_default","a","createElement","className","MoviePoster","alt","map","index","MovieGenre","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","prototype","PropTypes","string","isRequired","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_randerMovies","movie","src_Movie","id","title_english","medium_cover_image","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAwBA,SAASA,EAATC,GAAkEA,EAAjDC,IAAiD,IAA5CC,EAA4CF,EAA5CE,MAAOC,EAAqCH,EAArCG,OAAQC,EAA6BJ,EAA7BI,OAAQC,EAAqBL,EAArBK,QAAqBL,EAAZM,SACpD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaR,OAAQA,EAAQS,IAAKV,KAEpCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKP,GACLK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZN,EAAOS,IAAI,SAACT,EAAQU,GAAT,OACVP,EAAAC,EAAAC,cAACM,EAAD,CAAYX,OAAQA,EAAQH,IAAKa,OAQrCP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACXH,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACES,KAAMZ,EACNa,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAepB,SAASV,EAATW,GAAsC,IAAfnB,EAAemB,EAAfnB,OAAQS,EAAOU,EAAPV,IAC7B,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBa,IAAKpB,EAAQS,IAAKA,EAAKV,MAAOU,IAGtE,SAASG,EAATS,GAAgC,IAAVpB,EAAUoB,EAAVpB,OACpB,OAAOG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBN,GAoBzCL,EAAM0B,UAAY,CAChBxB,IAAKyB,IAAUC,OAAOC,WACtB1B,MAAOwB,IAAUC,OAAOC,WACxBzB,OAAQuB,IAAUC,OAAOC,WACzBxB,OAAQsB,IAAUC,OAAOC,WACzBvB,QAASqB,IAAUC,OAAOC,YAGb7B,QC3CA8B,6MAhDbC,MAAQ,KAKRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAHS,wBAAAG,EAAAO,SAAAX,QAObQ,SAAW,WACT,OAAOI,MACL,iEAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG9BG,cAAgB,WAad,OAZed,EAAKT,MAAMG,OAAOpB,IAAI,SAAAyC,GAEnC,OADAH,QAAQC,IAAIE,GAEV/C,EAAAC,EAAAC,cAAC8C,EAAD,CACEtD,IAAKqD,EAAME,GACXtD,MAAOoD,EAAMG,cACbtD,OAAQmD,EAAMI,mBACdtD,OAAQkD,EAAMlD,OACdC,QAASiD,EAAMjD,gGA3BrBsD,KAAK5B,8CAkCE,IACCE,EAAW0B,KAAK7B,MAAhBG,OAER,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAS,MAAQ,gBAC9B0B,KAAK7B,MAAMG,OAAS0B,KAAKN,gBAAkB,kBA3ClCO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.3d224166.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LinesEllipsis from \"react-lines-ellipsis\";\nimport \"./Movie.css\";\n\n// class Movie extends Component {\n//   static propTypes = {\n//     title: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n//   };\n\n//   render() {\n//     // console.log(this.props);\n//     return (\n//       <div>\n//         <h1>\n//           {this.props.index}, {this.props.title}\n//         </h1>\n//         <MoviePoster poster={this.props.poster} />\n//       </div>\n//     );\n//   }\n// }\n\nfunction Movie({ key, title, poster, genres, summary, torrents }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Column\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genres, index) => (\n            <MovieGenre genres={genres} key={index} />\n          ))}\n        </div>\n        {/* <div className=\"Movie__Torrents\">\n          {torrents.map((torrent, index) => (\n            <MovieTorrents torrent={torrent} key={index} />\n          ))}\n        </div> */}\n        <p className=\"Movie__Summary\">\n          <LinesEllipsis\n            text={summary}\n            maxLine=\"3\"\n            ellipsis=\"...\"\n            trimRight\n            basedOn=\"letters\"\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// class MoviePoster extends Component {\n//   render() {\n//     // console.log(this.props);\n//     return <img src={this.props.poster} alt=\"\" />;\n//   }\n// }\n\nfunction MoviePoster({ poster, alt }) {\n  return <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt} />;\n}\n\nfunction MovieGenre({ genres }) {\n  return <span className=\"Movie__Genre\">{genres}</span>;\n}\n\n// function MovieTorrents({ torrent }) {\n//   console.log(torrent);\n//   return <span className=\"Movie__Torrents\">{torrent}</span>;\n// }\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n};\n\nMovieGenre.propTypes = {\n  genres: PropTypes.string.isRequired\n};\n\n// MovieSummary.prototype = {\n//   summary: PropTypes.string.isRequired\n// };\n\nMovie.prototype = {\n  key: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n    )\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  _randerMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie);\n      return (\n        <Movie\n          key={movie.id}\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          genres={movie.genres}\n          summary={movie.summary}\n        />\n      );\n    });\n    return movies;\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._randerMovies() : \"loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}